--- !ruby/object:RI::ClassDescription 
attributes: []

class_methods: 
- !ruby/object:RI::MethodSummary 
  name: apply
comment: 
- !ruby/struct:SM::Flow::P 
  body: "Sequel's built-in caching plugin supports caching to any object that implements the Ruby-Memcache API. You can add caching for any model or for all models via:"
- !ruby/struct:SM::Flow::VERB 
  body: "  Model.plugin :caching, store   # Cache all models\n  MyModel.plugin :caching, store # Just cache MyModel\n"
- !ruby/struct:SM::Flow::P 
  body: "The cache store should implement the Ruby-Memcache API:"
- !ruby/struct:SM::Flow::VERB 
  body: "   cache_store.set(key, obj, time) # Associate the obj with the given key\n                                   # in the cache for the time (specified\n                                   # in seconds)\n   cache_store.get(key) =&gt; obj # Returns object set with same key\n   cache_store.get(key2) =&gt; nil # nil returned if there isn't an object\n                                # currently in the cache with that key\n"
constants: []

full_name: Sequel::Plugins::Caching
includes: []

instance_methods: []

name: Caching
superclass: 
