--- !ruby/object:RI::ClassDescription 
attributes: []

class_methods: 
- !ruby/object:RI::MethodSummary 
  name: plugin
comment: 
- !ruby/struct:SM::Flow::P 
  body: Sequel::Model is an object relational mapper built on top of Sequel core. Each model class is backed by a dataset instance, and many dataset methods can be called directly on the class. Model datasets return rows as model instances, which have fairly standard ORM instance behavior.
- !ruby/struct:SM::Flow::P 
  body: Sequel::Model is built completely out of plugins, the only method not part of a plugin is the plugin method itself. Plugins can override any class, instance, or dataset method defined by a previous plugin and call super to get the default behavior.
- !ruby/struct:SM::Flow::P 
  body: You can set the SEQUEL_NO_ASSOCIATIONS constant or environment variable to make Sequel not load the associations plugin by default.
constants: 
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: Map that stores model classes created with Sequel::Model(), to allow the reopening of classes when dealing with code reloading.
  name: ANONYMOUS_MODEL_CLASSES
  value: "{}"
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: Class methods added to model that call the method of the same name on the dataset
  name: DATASET_METHODS
  value: "%w'<< all avg count delete distinct eager eager_graph        each each_page empty? except exclude filter first from from_self        full_outer_join get graph group group_and_count group_by having import        inner_join insert insert_multiple intersect interval join join_table        last left_outer_join limit map multi_insert naked order order_by        order_more paginate print query range reverse_order right_outer_join        select select_all select_more server set set_graph_aliases         single_value to_csv to_hash union unfiltered unordered         update where with_sql'.map{|x| x.to_sym}"
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: Class instance variables to set to nil when a subclass is created, for -w compliance
  name: EMPTY_INSTANCE_VARIABLES
  value: "[:@overridable_methods_module, :@db]"
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: Empty instance methods to create that the user can override to get hook/callback behavior. Just like any other method defined by Sequel, if you override one of these, you should call super to get the default behavior (while empty by default, they can also be defined by plugins).
  name: HOOKS
  value: "[:after_initialize, :before_create, :after_create, :before_update,       :after_update, :before_save, :after_save, :before_destroy, :after_destroy,       :before_validation, :after_validation]"
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: Class instance variables that are inherited in subclasses. If the value is :dup, dup is called on the superclass's instance variable when creating the instance variable in the subclass. If the value is nil, the superclass's instance variable is used directly in the subclass.
  name: INHERITED_INSTANCE_VARIABLES
  value: "{:@allowed_columns=>:dup, :@dataset_methods=>:dup,        :@dataset_method_modules=>:dup, :@primary_key=>nil, :@use_transactions=>nil,       :@raise_on_save_failure=>nil, :@restricted_columns=>:dup, :@restrict_primary_key=>nil,       :@simple_pk=>nil, :@simple_table=>nil, :@strict_param_setting=>nil,       :@typecast_empty_string_to_nil=>nil, :@typecast_on_assignment=>nil,       :@raise_on_typecast_failure=>nil}"
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: Regexp that determines if a method name is normal in the sense that it could be called directly in ruby code without using send. Used to avoid problems when using eval with a string to define methods.
  name: NORMAL_METHOD_NAME_REGEXP
  value: /\A[A-Za-z_][A-Za-z0-9_]*\z/
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: The setter methods (methods ending with =) that are never allowed to be called automatically via set/update/new/etc..
  name: RESTRICTED_SETTER_METHODS
  value: "%w\"== === []= taguri= typecast_empty_string_to_nil= typecast_on_assignment= strict_param_setting= raise_on_save_failure= raise_on_typecast_failure=\""
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: Regular expression that determines if the method is a valid setter name (i.e. it ends with =).
  name: SETTER_METHOD_REGEXP
  value: /=\z/
full_name: Sequel::Model
includes: 
- !ruby/object:RI::IncludedModule 
  name: Metaprogramming
instance_methods: []

name: Model
superclass: Object
