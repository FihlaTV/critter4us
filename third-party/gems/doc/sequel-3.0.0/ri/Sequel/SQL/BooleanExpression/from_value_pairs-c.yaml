--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: "Take pairs of values (e.g. a hash or array of arrays of two pairs) and converts it to a BooleanExpression. The operator and args used depends on the case of the right (2nd) argument:"
- !ruby/object:SM::Flow::LIST 
  contents: 
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: 0..10 - left &gt;= 0 AND left &lt;= 10
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: "[1,2] - left IN (1,2)"
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: nil - left IS NULL
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: /as/ - left ~ 'as'
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: ":blah - left = blah"
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: "'blah' - left = 'blah'"
  type: :BULLET
- !ruby/struct:SM::Flow::P 
  body: "If multiple arguments are given, they are joined with the op given (AND by default, OR possible). If negate is set to true, all subexpressions are inverted before used. Therefore, the following expressions are equivalent:"
- !ruby/struct:SM::Flow::VERB 
  body: "  ~from_value_pairs(hash)\n  from_value_pairs(hash, :OR, true)\n"
full_name: Sequel::SQL::BooleanExpression::from_value_pairs
is_singleton: true
name: from_value_pairs
params: (pairs, op=:AND, negate=false)
visibility: public
